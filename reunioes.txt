Atas de reuniões

(27/04) Primeira - discussão do paper
	Direcionamento à primeira leitura: Migrate or not Migrate


(02/05) Segunda - discussão do anterior:
	Decisão: Não tinha algo tão prático nem com exemplos claros. 
		Busca de papers com trabalhos implementados.
		Escolha: Problems, and quality of service (QoS)

(09/05) Terceira - discussão do anerior:
	Decisão: interessante, mas precisamos atacar de forma clara o problema.
	Buscar um simulador para tentarmos enxergar situações.
		Encontrado: NS-3 simulator

(16/05) Quarta - discussão do NS-3:
	Conclusões, difícil de usar, complicado e quase impossível! 
		Ideia: Streaming de Vídeo em redes veiculares:
		Montar mini paper (apresentação) e pensar em como modelar o sistema
		Expectativa: Paper bem feito => já pedir bolsa e “mostrar o que tá sendo feito (pra Unicamp inclusive).
		Ficar uns 2, 3 meses modelando o problema pra dái pensarmos em simulações.

(25/05) Quinta às 15h - análise da introdução
	Correçoẽs feitas na introdução
		Ortografia
		Sentenças muito longas
		Informações muito densas, temos que generalizar mais na introdução e destrinchar nos próximos tópicos. Ex: dificuldades da rede.

(08/06) Quinta às 15h - Continuação do paper.
	Correções apontadas via e-mail sobre a introdução.
	Necessidade / terefas : Modelar o cenário.
		-Buscar no paper root referências pra papers com modelos pra nos basearmos.
			- Meios de conexão:
				Posição das antenas.
				O que terá nos carros.
			- Tipo de vídeos:
				Pouco / muito movimentados.
			- Carros:
				Movimento (inicialmente contínuo e em linha reta).
				Quantidade (primeiro com 1, depois com 2 e assim vai).
			- Modelos de Roteamento de Redes Veículares.
		- Pro streaming podemos usar softwares que já façam isso, e talvez deixemos um pouco de lado como fazer
		
(13/06) Terça às 16h - Conversa com prof. Edmundo.
	O que eles estão fazendo : Comunicação entre ônibus na cidade de
						Luxemburgo.
		- Simulação: Sumo (mobilidade) e “Vence” (Comunicação) + Omnete(é conectado ao sumo pelo “vece”.
				- Ifog “Sync” para a movimentação. (Outra opção é o Cloud “Sync”), Gold comentou do Syncgrid.
		- Indicação: Coimbra (Stream) → Edmundo Monteiro + David Abreu e Carine, tem modelo analítico.
		_Possibilidade de uma videoconferência.

(14/08) Segunda às 19h (online) - Voltando aos trabalhos.
		- Manter o foco nos pontos abordados no dia 08/06 pra depois o que o Edmundo nos passou;
		- Ler os papers [1] e [13] esperando suprir : Modelo de rede, conexão, movimentação e carros. 
	 	
(23/08)	Quarta às 20h (online) - Discutindo paper e modelando o ambiente.
		(Apontamentos em geral são sobre o paper, mas (*) especificam os pontos do nosso modelo.
		*Usar padrão 802.11 p;
		*Modos de conexao v2v, v2c;
		-3 tipos de cloudlets:
			-Vehicular
				-GVCC : Gerenciador que especificam que carros vão ter quais vms (enxergar outros carros)
					*Provável melhor escolha para o modelo.
				-SVCC :	
			-Roadside : Servidor dedicado com pontos ao longo da pista
				*Será que a Unicamp n tem já algo desenvolvido? Achamos que não vamos conseguir desenvolver um novo pois pode chegar na plataforma deles e eles já terem uma específica.
			-Central
				Essa é do provedor dos "vídeos"
		-Tipos de download
			-A) O carro exerga os carros e avisa pra cloudlet para realocação do transito.
			-B) Os onibus tem camera HD filmando, mas para armazenar ele vão passando pra cloudlets, no final, cada cloudlet tem pedaços com os horários.
			-C) Download cooperativo de arquivos grandes
				-Supondo que estão indo pro mesmo lugar, seria perfeito!
				*Será que então não vale a pena questionarmos no nosso sistema "Pra onde vão" ?
				*Estando no wifi (WAVE), fica fácil compartilhar coisas na rede entre os carros.
				*No 3g/4g já fica difícil, será que temos como supor isso compartilhado ou via cota?

		- Modelos para migração de VM:
			-São 4.
			*Verificar quais a Unicamp usa, pra dai então estudar a fundo.

		-Predição de videos:
			*Deixa trechos dos vídeos pré baixado, para download "instataneo" no momento da conexão com a cloudlet para dar a falsa sensação de "live" e ai ter o tempo então de baixar mais pedaços.

		- Tipos de vídeos:
			*Filmes, vídeos e live.

		- Movimentação dos carros:
			*Movimentação linear, transitando pouco entre muitas cloudlets, e sem muitos pontos de para.
			*Definir por exemplo 4 pontos, e carros transitando entres percursos diferentes:
				Um vai de A-B
				Um vai de A-D
					=> Duranto A-B, os dois baixam o mesmo cooperativamente.
(25/08) Sexta-feira
	- Tratar modos de conexão de veículos : v2f -> Direto com a Cloud
	- Focar na banda, procurar simuladores e estudar distribuição de arquivos grandes.		
	- Na predição de vídeos, padronizar um tempo de delay específico para todos.
	- Tranferencia de pacotes: Qual é melhor, UDP ou TCP/IP ?

(29/08) Terça-feira
	Opiniões externas sobre o tópicos do dia 25/08:

	Tópicos abordados:
	
	1. Material em redes -> entender transmissão de pacotes
	2. Simulador bom
	3. Large files e streaming

	Opniões:
		- Gnann : 
			2. mininet
		- Daniel :
			Para transmissao :
				- dash (Dynamic Adaptive Streaming on/for http), usado pelo Youtube e Netflix
					- Ele adapta o envio (quantidade, qualidade) de acordo com qualidade de sinal e etc.
				- multicast 
					- Pode ser usado para evitar sobrecarga daquele que vai repassar , se fosse via broadcast, e então mandar só para os específicos, pensando também por ex no caso de download coletivo.
						- A partir daí pode-se ser pensado em coisas como balancear o que vai ser repassado dependendo do "hardware" do carro.
						- Amplia o alcance de tudo. Se a antena já não alcança o carro C, mas alcança um B que alcança o C, então da pra continuar a transmissão/contato.
			2. mininet é um emulador, então cria vários terminais , mas necessita de programas prontos a serem rodados e não tem mobilidade (não tem certeza dessa última parte)	
			   ns3 : maior a curva de aprendizado mas tem mobilidade;
			   SUMO (Simulation for Urban Mobility) : Bem famoso, usado por todo mundo da área;
			   EstiNet (antigo NCTuns) : Ele mesmo (Daniel) o utilizou e parece ser bacana, inclui mobilidade. Mistura simulação com emulação, então seria um mininet com mobilidade. Inclusive, foi pensado para pesquisa em redes veículares.

			1. Livros:
				- Kurose é o mais recomendado;
				- "Tanenbaum" também tem;
			   Professor: Leandro Villas, Unicamp, tem pesquisas na área.

			3. Não parece ser o problema que requer atenção, se o download for coletivo por exemplo sem problemas. No max, pode-se ver casos de sinal e baixar ou melhorar qualidade e etc. Aqui ele se preocupou mais com característica de hardware e de pra quantas é possível repassar e etc.

		- Kanashiro :
			Pessoal do InterSCity ta desenvolvendo a plataforma e um simulador.
				- Simulador: Simula o transito e ve congestionamentos, mas acha que não tem a parte de redes, e então cogitou implementarmos (o que eu achei bem bacana, mas acho que fica pro futuro).
					Responsável pelo simulador : Eduardo Santana, aluno de doc. Podemos marcar uma conversa.
			Sugeriu ver os simuladores que já existem para ver se tem tudo o que precisamos, se faltar algo, serve de justificativa pra começarmos a implementar um (mas novamente, estamos entendendo as coisas ainda e acho que então fica pro futuro, mas gostei da ideia).

(30/08) Quarta-feira: Absorção dos brainstorms
	- Foi dicidido então estudo Dash (utilizado pelo Youtube e Netflix), distribuição de pacotes Multicast;
	- Vamos usar principalmente o Kurose;
	- Vamos atras do Sumo e Estinet
	- Enviar tais decisões por e-mail para o Gold.

(11/09) Segunda-feira: Analisando devolutiva do e-mail
	- Decidimos fazer o estudo dos primeiros 2 capítulos do livro de Redes do Kurose para começarmos a ter noções dos esquemas de redes que precisaremos estudar para elaborar um modelo e futuramente implementa-lo;
	- Em relação ao DASH vamos fazer um estudo comparativo com outras formas de disponibilização de conteúdo de mídia para verificarmos se ele é realmente a melhor opção para o nosso modelo devido ao fato da utilização de TCP e o nosso trabalho ser focado em transmissões ao vivo. Vamos realizar durante esse semana algumas pesquisas sobre trabalhos que utilizaram o DASH em plataformas de transmissão ao vivo para conseguirmos uma justificativa do uso ou não do DASH;
	- Em relação ao simulador que vamos focar, o SUMO, nós pretendemos fazer o estudo dos modelos e do fluxo de código dos módulos, para assim termos uma visão mais detalhada de onde poderemos incluir implementações próprias e onde conseguiremos utilizar coisas do próprio simulador para no futuro implementar o nosso modelo;

(23/09) Sexta-feira: Online - Resumos do que está em andamento
	- Simulador:
		- O simulador parece ser bem bacana e parece realmente ser o caminho que vamos usar. Por enquanto está uma confusão de nomes, pois é como se fosse uma única API com um monte de bibliotecas. Então o OMNet++ é a API e o Veins é uma das bibliotecas.
		- No momento estamos usando o OMNet++, que é o simulador propriamente dito, aprendendo sua estrutura , ferramentas e afins.
		- Estrutura: A programação é em C++ e ele trabalha com 3 tipos de arquivos principalmente:
			- NED: é utilizado para definir os componentes e uní-los como sendo parte de uma rede.
			- omnetpp.ini: é o inicializador da simulação, e especifíca qual rede será executada, já que o NED pode possuir várias. Aqui também é possível definir parâmetros e variáveis "globais".
			- .cc : por último, o código em C++ propriamente dito que é o responsável pela ação da simulação.
			Em resumo, o NED cria e junta os componentes, o inicializador aponta qual rede do NED será executada, assim como o arquivo .cc importa os componentes (portante a rede) do NED.
		- Recursos: A partir do contato com uns primeiros exemplos tivemos contato com:
			- Gráficos: Parece boa a geração de gráficos no programa. Elas permitem gravações e então posteriormente a API gera tais gráficos (de vários tipos, histograma, pontos, etc). 
				Problema: para exemplos pequenos os arquivos de saídas já foram relativamente "pesados".
			- Debug: É possível debugar cada elemento da rede separado, de forma a não ter que ficar procurando eventuais erros ou eventos em toda uma saída e então tentar apontar qual resposta é de que elemento.
			- Caracterização: É possível diferenciar os elementos, com cores, imagens e etc.
		- Novamente, o simulador parece bacana  completo. Tivemos um primeiro contato e percebemos tais característica, procurando em tutoriais mais avançados verificamos também a inclusão de movimentação dos elementos da rede, o que é claro demanda uma maior curva de aprendizado, junto com o ganho de prática e familiaridade com o programa.

	- DASH:
		"The adaptation to the bitrate or spatial resolution is done on the client side for each segment, e.g., the client can switch to a higher bitrate  if bandwidth permits  on a per segment basis, or to a lower bitrate  if bandwidth decreases. This has several advantages because the client knows its capabilities such as the received throughput, delay, device capabilities (e.g., screen resolution), etc. best." [1]
		Baseado nessa frase achamos que o DASH (assim como qualquer tecnologia transmissão adaptativa) parece uma ótima solução, como modo de transmissão de arquivo de mídia, para o nosso modelo. O fato do Dash permitir ao cliente redimensionar e optar pelo melhor bitrate dependendo das limitações de recursos parece oferecer uma maneira eficiente de proporcionar a melhor qualidade possível para o usuário.

		"All existing adaptive HTTP streaming technologies, such as the proprietary Adobe HTTP Dynamic Streaming (HDS), Apple HTTP Live Streaming (HLS), Microsoft Smooth Streaming (MSS), and the only international standardized solution MPEG Dynamic Adaptive Streaming over HTTP (MPEG-DASH) follow nearly the same principle." [1]
		Outro motivo é o fato do DASH ser uma técnica intercionalizada facilitando assim o uso e a distribuição dela por aplicações.

		"[Tabela do site] [2]"
		Se compararmos as features oferecidas pelo DASH em relação a todas as outras tecnologias de transmissão adaptativa, podemos perceber que ele parece realmente ser a melhor escolha dentro desta categoria.
	
		Em relação a todas essas features algumas parecem ser bem interessantes para a nossa aplicação de transmissão ao vivo:
			1 - "Deployment on Standard HTTP Servers": Isso facilita a implementação em servidores comuns, sem um gasto adicional para a implementação;
			2 - "Fast Channel Switching": isso é diretamente relacionado ao tamanho dos pedaços em que a mídia é dividida, algumas implementações dividem em tamanhos de 10 segundos, mas o DASH divide em tamanhos de 2 a 4 segundos, facilitando uma rápida troca de qualidade entre os períodos da mídia;
			3 - "Support Multiple CDNs[3] in Parallel": O DASH fornece uma forma de sinalização nativa para se obter conteúdo em paralelo de diversas fontes, isso permite ao cliente escolher a melhor fonte, algo que pode ser de extrema utilidade no nosso contexto de obtenção do conteúdo em tempo real na rede para os carros;
			4 - "HTML5 Support": Utilizando as extensões de vídeo do HTML5 é possível utilizar a função nativa de reprodução dos buscadores atuais;
			5 - "Agnostic to Video Codecs[4]": Nos da a liberdade de escolher e trabalhar com diversas codificadores de vídeo, permite a escolha daquele que nos parecer melhor à aplicação;
			6 - "Agnostic to Audio Codecs[4]": Pelo mesmo motivo da feature acima;
			7 - "Definition of Quality Metrics": O DASH permite e estabelace para o cliente métricas para avaliações de aspectos da qualidade do serviço, o que nos possibilita um melhor entendimento;
			8 -  "Client Logging & Reporting": Oferece uma interface padrão de reporte de qualidade de serviço;
			9 - "Client Failover": Oferece um mecanismo de checagem de falha das CDNs, permitindo o cliente baixar um mesmo segmento de diversas fontes, evitando perdas;
			10 - "Multiple Video Views": Permite ao usuário optar por ângulos diferentes de vizualisação caso seja oferecido pelo provedor, isso é muito usado em transmissões ao vivo de fórmula 1 e pode ser facilmente utilizado na nossa aplicação em transmissões esportivas interativas num futuro;

		Esses fatos todos são fonte da pesquisa relacionada a primeira referência, todas as outras referências explicam um pouco mais como o DASH funciona e parecem corroborar com a opinião da primeira. Portanto, imaginamos que o DASH será uma ferramente poderosa a se usar em relação a transmissão de mídia. 
		O DASH vem dominando certos espaços no mercado de distribuidores de vídeo, como Netflix e YouTube, que passaram a usar o DASH como forma de distribuição adaptativa [7]. Isso nos mostra uma provável tendência do uso desta tecnologia no grande mercado de distribuidores, o que pode ser um grande indicativo que deveríamos utilizar o DASH. 
		Outro ponto também é que algumas emissoras de TV estão começando a utilizar o DASH para transmissões UHD, um outro indicativo de que esta tecnologia pode ser a mais indicada no nosso caso [7].
		De forma geral estamos bem convencidos de que o DASH é uma ótima opção para o nosso modelo quanto a forma de transmissão de mídia, pois pode ser utilizado de forma eficiente para transmissões ao vivo e pode nos fornecer basicamente todas as ferramentas que precisamos para a a nossa aplicação e para a análise dela. 
		Portanto, achamos que o DASH pode sim suprir todas nossas necessidades de compreender e melhorar a transmissão e a QoS do nosso modelo.


		[1] MPEG-DASH vs. Apple HLS vs. Microsoft Smooth Streaming vs. Adobe HDS - https://bitmovin.com/mpeg-dash-vs-apple-hls-vs-microsoft-smooth-streaming-vs-adobe-hds/
		[2] Tabela de comparação MPEG-DASH vs. Apple HLS vs. Microsoft Smooth Streaming vs. Adobe HDS (Anexada)
		[3] CDN https://en.wikipedia.org/wiki/Content_delivery_network
		[4] Codec https://pt.wikipedia.org/wiki/Codec
		[5] http://www.streamingmedia.com/Articles/Editorial/What-Is-.../What-is-MPEG-DASH-79041.aspx
		[6] https://www.dacast.com/blog/explaining-mpeg-dash/
		[7] https://www.encoding.com/mpeg-dash/
		[8] http://www.streamingmediaglobal.com/Articles/Editorial/Featured-Articles/The-State-of-MPEG-DASH-2017-116505.aspx
	
(06/10) Reunião com Gold:
	- Devolutiva do que tem sido feito desde Agosto:
		- Parece que estamos no caminho certo. Seguir agora os seguintes pontos:
		- Em relação aos protocolos um dos objetivos finais é talvez aplicar vários, e ver qual se sair melhor.
		- Agora, temos os seguintes tópicos para seguir:		
			- Descobrir porque DASH usa TCP (Pois TCP "não admiti" perca de pacotes, faria mais sentido o UDP);
			- Ver como o DASH é, e se é, implementado no Omnete++;
			- Simular um ambiente por completo agora:
				- Ambiente pequeno, uma rua, com um ou dois carros em linha reta;
				- Componentes: Carros, Antenas e a Nuvem;
			- Montar um texto explicando os avanços atuais, nosso atual foco e a metodologia que estamos usando (pesquisando, usando o simulador (quais e o que em específico)) para enviar para a Unicamp.

(15/10) Divisão de tarefas para até 15/11:
	- Andrei:
   		- Pesquisa e estudo da implementação de um ambiente em VEINS;
		- Pesquisa e estudo da impletamentação dos modelos móveis da rede;
		- Tentar implementar os itens acima;
		- Realizar simulações com o ambiente e os modelos móveis;
	
	- Patrick:
		- Instalação do simulador nos ambientes LINUX;
		- Estudo do tutorial introdutório do VEINS;
		- Pesquisa sobre a justificativa do uso do TCP no DASH;
		- Pesquisa mais a fundo sobre o DASH;
		- Procurar alguma implementação do DASH no VEINS;

	- Texto para a UNICAMP.
			
(05/12) Projeto "Redes móveis" - VideoCall
	- Continuar comparando com o DASH para apontar em que pontos vale a pena usar o DASH.
	- Não necessariamente implementar todo o DASH ao pé da letra, conseguindo o TCP, utilizar algum aspecto do DASH e tentar uma implementação própria.
	- Pra submissão, foi adiada uma semana a data do resumo, temos mais "2 semanas".	
