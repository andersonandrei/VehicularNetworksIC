Atas de reuniões

(27/04) Primeira - discussão do paper
	Direcionamento à primeira leitura: Migrate or not Migrate


(02/05) Segunda - discussão do anterior:
	Decisão: Não tinha algo tão prático nem com exemplos claros. 
		Busca de papers com trabalhos implementados.
		Escolha: Problems, and quality of service (QoS)

(09/05) Terceira - discussão do anerior:
	Decisão: interessante, mas precisamos atacar de forma clara o problema.
	Buscar um simulador para tentarmos enxergar situações.
		Encontrado: NS-3 simulator

(16/05) Quarta - discussão do NS-3:
	Conclusões, difícil de usar, complicado e quase impossível! 
		Ideia: Streaming de Vídeo em redes veiculares:
		Montar mini paper (apresentação) e pensar em como modelar o sistema
		Expectativa: Paper bem feito => já pedir bolsa e “mostrar o que tá sendo feito (pra Unicamp inclusive).
		Ficar uns 2, 3 meses modelando o problema pra dái pensarmos em simulações.

(25/05) Quinta às 15h - análise da introdução
	Correçoẽs feitas na introdução
		Ortografia
		Sentenças muito longas
		Informações muito densas, temos que generalizar mais na introdução e destrinchar nos próximos tópicos. Ex: dificuldades da rede.

(08/06) Quinta às 15h - Continuação do paper.
	Correções apontadas via e-mail sobre a introdução.
	Necessidade / terefas : Modelar o cenário.
		-Buscar no paper root referências pra papers com modelos pra nos basearmos.
			- Meios de conexão:
				Posição das antenas.
				O que terá nos carros.
			- Tipo de vídeos:
				Pouco / muito movimentados.
			- Carros:
				Movimento (inicialmente contínuo e em linha reta).
				Quantidade (primeiro com 1, depois com 2 e assim vai).
			- Modelos de Roteamento de Redes Veículares.
		- Pro streaming podemos usar softwares que já façam isso, e talvez deixemos um pouco de lado como fazer
		
(13/06) Terça às 16h - Conversa com prof. Edmundo.
	O que eles estão fazendo : Comunicação entre ônibus na cidade de
						Luxemburgo.
		- Simulação: Sumo (mobilidade) e “Vence” (Comunicação) + Omnete(é conectado ao sumo pelo “vece”.
				- Ifog “Sync” para a movimentação. (Outra opção é o Cloud “Sync”), Gold comentou do Syncgrid.
		- Indicação: Coimbra (Stream) → Edmundo Monteiro + David Abreu e Carine, tem modelo analítico.
		_Possibilidade de uma videoconferência.

(14/08) Segunda às 19h (online) - Voltando aos trabalhos.
		- Manter o foco nos pontos abordados no dia 08/06 pra depois o que o Edmundo nos passou;
		- Ler os papers [1] e [13] esperando suprir : Modelo de rede, conexão, movimentação e carros. 
	 	
(23/08)	Quarta às 20h (online) - Discutindo paper e modelando o ambiente.
		(Apontamentos em geral são sobre o paper, mas (*) especificam os pontos do nosso modelo.
		*Usar padrão 802.11 p;
		*Modos de conexao v2v, v2c;
		-3 tipos de cloudlets:
			-Vehicular
				-GVCC : Gerenciador que especificam que carros vão ter quais vms (enxergar outros carros)
					*Provável melhor escolha para o modelo.
				-SVCC :	
			-Roadside : Servidor dedicado com pontos ao longo da pista
				*Será que a Unicamp n tem já algo desenvolvido? Achamos que não vamos conseguir desenvolver um novo pois pode chegar na plataforma deles e eles já terem uma específica.
			-Central
				Essa é do provedor dos "vídeos"
		-Tipos de download
			-A) O carro exerga os carros e avisa pra cloudlet para realocação do transito.
			-B) Os onibus tem camera HD filmando, mas para armazenar ele vão passando pra cloudlets, no final, cada cloudlet tem pedaços com os horários.
			-C) Download cooperativo de arquivos grandes
				-Supondo que estão indo pro mesmo lugar, seria perfeito!
				*Será que então não vale a pena questionarmos no nosso sistema "Pra onde vão" ?
				*Estando no wifi (WAVE), fica fácil compartilhar coisas na rede entre os carros.
				*No 3g/4g já fica difícil, será que temos como supor isso compartilhado ou via cota?

		- Modelos para migração de VM:
			-São 4.
			*Verificar quais a Unicamp usa, pra dai então estudar a fundo.

		-Predição de videos:
			*Deixa trechos dos vídeos pré baixado, para download "instataneo" no momento da conexão com a cloudlet para dar a falsa sensação de "live" e ai ter o tempo então de baixar mais pedaços.

		- Tipos de vídeos:
			*Filmes, vídeos e live.

		- Movimentação dos carros:
			*Movimentação linear, transitando pouco entre muitas cloudlets, e sem muitos pontos de para.
			*Definir por exemplo 4 pontos, e carros transitando entres percursos diferentes:
				Um vai de A-B
				Um vai de A-D
					=> Duranto A-B, os dois baixam o mesmo cooperativamente.
(25/08) Sexta-feira
	- Tratar modos de conexão de veículos : v2f -> Direto com a Cloud
	- Focar na banda, procurar simuladores e estudar distribuição de arquivos grandes.		
	- Na predição de vídeos, padronizar um tempo de delay específico para todos.
	- Tranferencia de pacotes: Qual é melhor, UDP ou TCP/IP ?

(29/08) Terça-feira
	Opiniões externas sobre o tópicos do dia 25/08:

	Tópicos abordados:
	
	1. Material em redes -> entender transmissão de pacotes
	2. Simulador bom
	3. Large files e streaming

	Opniões:
		- Gnann : 
			2. mininet
		- Daniel :
			Para transmissao :
				- dash (Dynamic Adaptive Streaming on/for http), usado pelo Youtube e Netflix
					- Ele adapta o envio (quantidade, qualidade) de acordo com qualidade de sinal e etc.
				- multicast 
					- Pode ser usado para evitar sobrecarga daquele que vai repassar , se fosse via broadcast, e então mandar só para os específicos, pensando também por ex no caso de download coletivo.
						- A partir daí pode-se ser pensado em coisas como balancear o que vai ser repassado dependendo do "hardware" do carro.
						- Amplia o alcance de tudo. Se a antena já não alcança o carro C, mas alcança um B que alcança o C, então da pra continuar a transmissão/contato.
			2. mininet é um emulador, então cria vários terminais , mas necessita de programas prontos a serem rodados e não tem mobilidade (não tem certeza dessa última parte)	
			   ns3 : maior a curva de aprendizado mas tem mobilidade;
			   SUMO (Simulation for Urban Mobility) : Bem famoso, usado por todo mundo da área;
			   EstiNet (antigo NCTuns) : Ele mesmo (Daniel) o utilizou e parece ser bacana, inclui mobilidade. Mistura simulação com emulação, então seria um mininet com mobilidade. Inclusive, foi pensado para pesquisa em redes veículares.

			1. Livros:
				- Kurose é o mais recomendado;
				- "Tanenbaum" também tem;
			   Professor: Leandro Villas, Unicamp, tem pesquisas na área.

			3. Não parece ser o problema que requer atenção, se o download for coletivo por exemplo sem problemas. No max, pode-se ver casos de sinal e baixar ou melhorar qualidade e etc. Aqui ele se preocupou mais com característica de hardware e de pra quantas é possível repassar e etc.

		- Kanashiro :
			Pessoal do InterSCity ta desenvolvendo a plataforma e um simulador.
				- Simulador: Simula o transito e ve congestionamentos, mas acha que não tem a parte de redes, e então cogitou implementarmos (o que eu achei bem bacana, mas acho que fica pro futuro).
					Responsável pelo simulador : Eduardo Santana, aluno de doc. Podemos marcar uma conversa.
			Sugeriu ver os simuladores que já existem para ver se tem tudo o que precisamos, se faltar algo, serve de justificativa pra começarmos a implementar um (mas novamente, estamos entendendo as coisas ainda e acho que então fica pro futuro, mas gostei da ideia).

(30/08) Quarta-feira: Absorção dos brainstorms
	- Foi dicidido então estudo Dash (utilizado pelo Youtube e Netflix), distribuição de pacotes Multicast;
	- Vamos usar principalmente o Kurose;
	- Vamos atras do Sumo e Estinet
	- Enviar tais decisões por e-mail para o Gold.

(11/09) Segunda-feira: Analisando devolutiva do e-mail
	- Decidimos fazer o estudo dos primeiros 2 capítulos do livro de Redes do Kurose para começarmos a ter noções dos esquemas de redes que precisaremos estudar para elaborar um modelo e futuramente implementa-lo;
	- Em relação ao DASH vamos fazer um estudo comparativo com outras formas de disponibilização de conteúdo de mídia para verificarmos se ele é realmente a melhor opção para o nosso modelo devido ao fato da utilização de TCP e o nosso trabalho ser focado em transmissões ao vivo. Vamos realizar durante esse semana algumas pesquisas sobre trabalhos que utilizaram o DASH em plataformas de transmissão ao vivo para conseguirmos uma justificativa do uso ou não do DASH;
	- Em relação ao simulador que vamos focar, o SUMO, nós pretendemos fazer o estudo dos modelos e do fluxo de código dos módulos, para assim termos uma visão mais detalhada de onde poderemos incluir implementações próprias e onde conseguiremos utilizar coisas do próprio simulador para no futuro implementar o nosso modelo;

(23/09) Sexta-feira: Online - Resumos do que está em andamento
	- Simulador:
		- O simulador parece ser bem bacana e parece realmente ser o caminho que vamos usar. Por enquanto está uma confusão de nomes, pois é como se fosse uma única API com um monte de bibliotecas. Então o OMNet++ é a API e o Veins é uma das bibliotecas.
		- No momento estamos usando o OMNet++, que é o simulador propriamente dito, aprendendo sua estrutura , ferramentas e afins.
		- Estrutura: A programação é em C++ e ele trabalha com 3 tipos de arquivos principalmente:
			- NED: é utilizado para definir os componentes e uní-los como sendo parte de uma rede.
			- omnetpp.ini: é o inicializador da simulação, e especifíca qual rede será executada, já que o NED pode possuir várias. Aqui também é possível definir parâmetros e variáveis "globais".
			- .cc : por último, o código em C++ propriamente dito que é o responsável pela ação da simulação.
			Em resumo, o NED cria e junta os componentes, o inicializador aponta qual rede do NED será executada, assim como o arquivo .cc importa os componentes (portante a rede) do NED.
		- Recursos: A partir do contato com uns primeiros exemplos tivemos contato com:
			- Gráficos: Parece boa a geração de gráficos no programa. Elas permitem gravações e então posteriormente a API gera tais gráficos (de vários tipos, histograma, pontos, etc). 
				Problema: para exemplos pequenos os arquivos de saídas já foram relativamente "pesados".
			- Debug: É possível debugar cada elemento da rede separado, de forma a não ter que ficar procurando eventuais erros ou eventos em toda uma saída e então tentar apontar qual resposta é de que elemento.
			- Caracterização: É possível diferenciar os elementos, com cores, imagens e etc.
		- Novamente, o simulador parece bacana  completo. Tivemos um primeiro contato e percebemos tais característica, procurando em tutoriais mais avançados verificamos também a inclusão de movimentação dos elementos da rede, o que é claro demanda uma maior curva de aprendizado, junto com o ganho de prática e familiaridade com o programa.

	- DASH:
		"The adaptation to the bitrate or spatial resolution is done on the client side for each segment, e.g., the client can switch to a higher bitrate  if bandwidth permits  on a per segment basis, or to a lower bitrate  if bandwidth decreases. This has several advantages because the client knows its capabilities such as the received throughput, delay, device capabilities (e.g., screen resolution), etc. best." [1]
		Baseado nessa frase achamos que o DASH (assim como qualquer tecnologia transmissão adaptativa) parece uma ótima solução, como modo de transmissão de arquivo de mídia, para o nosso modelo. O fato do Dash permitir ao cliente redimensionar e optar pelo melhor bitrate dependendo das limitações de recursos parece oferecer uma maneira eficiente de proporcionar a melhor qualidade possível para o usuário.

		"All existing adaptive HTTP streaming technologies, such as the proprietary Adobe HTTP Dynamic Streaming (HDS), Apple HTTP Live Streaming (HLS), Microsoft Smooth Streaming (MSS), and the only international standardized solution MPEG Dynamic Adaptive Streaming over HTTP (MPEG-DASH) follow nearly the same principle." [1]
		Outro motivo é o fato do DASH ser uma técnica intercionalizada facilitando assim o uso e a distribuição dela por aplicações.

		"[Tabela do site] [2]"
		Se compararmos as features oferecidas pelo DASH em relação a todas as outras tecnologias de transmissão adaptativa, podemos perceber que ele parece realmente ser a melhor escolha dentro desta categoria.
	
		Em relação a todas essas features algumas parecem ser bem interessantes para a nossa aplicação de transmissão ao vivo:
			1 - "Deployment on Standard HTTP Servers": Isso facilita a implementação em servidores comuns, sem um gasto adicional para a implementação;
			2 - "Fast Channel Switching": isso é diretamente relacionado ao tamanho dos pedaços em que a mídia é dividida, algumas implementações dividem em tamanhos de 10 segundos, mas o DASH divide em tamanhos de 2 a 4 segundos, facilitando uma rápida troca de qualidade entre os períodos da mídia;
			3 - "Support Multiple CDNs[3] in Parallel": O DASH fornece uma forma de sinalização nativa para se obter conteúdo em paralelo de diversas fontes, isso permite ao cliente escolher a melhor fonte, algo que pode ser de extrema utilidade no nosso contexto de obtenção do conteúdo em tempo real na rede para os carros;
			4 - "HTML5 Support": Utilizando as extensões de vídeo do HTML5 é possível utilizar a função nativa de reprodução dos buscadores atuais;
			5 - "Agnostic to Video Codecs[4]": Nos da a liberdade de escolher e trabalhar com diversas codificadores de vídeo, permite a escolha daquele que nos parecer melhor à aplicação;
			6 - "Agnostic to Audio Codecs[4]": Pelo mesmo motivo da feature acima;
			7 - "Definition of Quality Metrics": O DASH permite e estabelace para o cliente métricas para avaliações de aspectos da qualidade do serviço, o que nos possibilita um melhor entendimento;
			8 -  "Client Logging & Reporting": Oferece uma interface padrão de reporte de qualidade de serviço;
			9 - "Client Failover": Oferece um mecanismo de checagem de falha das CDNs, permitindo o cliente baixar um mesmo segmento de diversas fontes, evitando perdas;
			10 - "Multiple Video Views": Permite ao usuário optar por ângulos diferentes de vizualisação caso seja oferecido pelo provedor, isso é muito usado em transmissões ao vivo de fórmula 1 e pode ser facilmente utilizado na nossa aplicação em transmissões esportivas interativas num futuro;

		Esses fatos todos são fonte da pesquisa relacionada a primeira referência, todas as outras referências explicam um pouco mais como o DASH funciona e parecem corroborar com a opinião da primeira. Portanto, imaginamos que o DASH será uma ferramente poderosa a se usar em relação a transmissão de mídia. 
		O DASH vem dominando certos espaços no mercado de distribuidores de vídeo, como Netflix e YouTube, que passaram a usar o DASH como forma de distribuição adaptativa [7]. Isso nos mostra uma provável tendência do uso desta tecnologia no grande mercado de distribuidores, o que pode ser um grande indicativo que deveríamos utilizar o DASH. 
		Outro ponto também é que algumas emissoras de TV estão começando a utilizar o DASH para transmissões UHD, um outro indicativo de que esta tecnologia pode ser a mais indicada no nosso caso [7].
		De forma geral estamos bem convencidos de que o DASH é uma ótima opção para o nosso modelo quanto a forma de transmissão de mídia, pois pode ser utilizado de forma eficiente para transmissões ao vivo e pode nos fornecer basicamente todas as ferramentas que precisamos para a a nossa aplicação e para a análise dela. 
		Portanto, achamos que o DASH pode sim suprir todas nossas necessidades de compreender e melhorar a transmissão e a QoS do nosso modelo.


		[1] MPEG-DASH vs. Apple HLS vs. Microsoft Smooth Streaming vs. Adobe HDS - https://bitmovin.com/mpeg-dash-vs-apple-hls-vs-microsoft-smooth-streaming-vs-adobe-hds/
		[2] Tabela de comparação MPEG-DASH vs. Apple HLS vs. Microsoft Smooth Streaming vs. Adobe HDS (Anexada)
		[3] CDN https://en.wikipedia.org/wiki/Content_delivery_network
		[4] Codec https://pt.wikipedia.org/wiki/Codec
		[5] http://www.streamingmedia.com/Articles/Editorial/What-Is-.../What-is-MPEG-DASH-79041.aspx
		[6] https://www.dacast.com/blog/explaining-mpeg-dash/
		[7] https://www.encoding.com/mpeg-dash/
		[8] http://www.streamingmediaglobal.com/Articles/Editorial/Featured-Articles/The-State-of-MPEG-DASH-2017-116505.aspx
	
(06/10) Reunião com Gold:
	- Devolutiva do que tem sido feito desde Agosto:
		- Parece que estamos no caminho certo. Seguir agora os seguintes pontos:
		- Em relação aos protocolos um dos objetivos finais é talvez aplicar vários, e ver qual se sair melhor.
		- Agora, temos os seguintes tópicos para seguir:		
			- Descobrir porque DASH usa TCP (Pois TCP "não admiti" perca de pacotes, faria mais sentido o UDP);
			- Ver como o DASH é, e se é, implementado no Omnete++;
			- Simular um ambiente por completo agora:
				- Ambiente pequeno, uma rua, com um ou dois carros em linha reta;
				- Componentes: Carros, Antenas e a Nuvem;
			- Montar um texto explicando os avanços atuais, nosso atual foco e a metodologia que estamos usando (pesquisando, usando o simulador (quais e o que em específico)) para enviar para a Unicamp.

(15/10) Divisão de tarefas para até 15/11:
	- Andrei:
   		- Pesquisa e estudo da implementação de um ambiente em VEINS;
		- Pesquisa e estudo da impletamentação dos modelos móveis da rede;
		- Tentar implementar os itens acima;
		- Realizar simulações com o ambiente e os modelos móveis;
	
	- Patrick:
		- Instalação do simulador nos ambientes LINUX;
		- Estudo do tutorial introdutório do VEINS;
		- Pesquisa sobre a justificativa do uso do TCP no DASH;
		- Pesquisa mais a fundo sobre o DASH;
		- Procurar alguma implementação do DASH no VEINS;

	- Texto para a UNICAMP.
			
(05/12) Projeto "Redes móveis" - VideoCall
	- Continuar comparando com o DASH para apontar em que pontos vale a pena usar o DASH.
	- Não necessariamente implementar todo o DASH ao pé da letra, conseguindo o TCP, utilizar algum aspecto do DASH e tentar uma implementação própria.
	- Pra submissão, foi adiada uma semana a data do resumo, temos mais "2 semanas".	

	- Omnetando [descrição do trabalho realizado]

	- Em cima do exemplo de wireless do INET Framework implementamos uma versão com UDPStreamingVideo;
	- Assim já ganahmos:
		- Mobilidade (linear);
		- Existências de obstáculos no cenário;
		- Temos 1 aparelho como server e 4 como hosts.
		- Dados a serem interpretados e passiveis de geração de gráficos.

(06/12) - 18h~08h – Omnetando [descrição do trabalho realizado]
	
	- Tentativas de implementar o TCP no OMNet:
	- Encontramos uma implementação direta do DASH mas não conseguimos rodar.
		- Problemas de versões, a implementação utiliza módulos que não existem mais nas novas versões.
		- Tentativas :
			- Download das versões anteriores :
				- Site sem suporte pra versões abaixo da 3, e queriamos a 2.5 (2013).
			- Importar as classes do anterior isoladamente para a nova :
				- Infinitos includes falhando e outros dando erro, pois os caminhos mudaram.

	- Tentamos criar uma apenas de TCP do zero :
		- Problemas:
			- Não encontramos NENHUMA que exemplifique, nem exemplos simples de apenas 2 hosts.
			- Tentativas baseadas no UDP que deu certo falham e achamos que não sabemos adicionar os diferenciais de um pro outro.
			- Tentativas baseadas no do DASH de forma minimalistas ignorando os aspéctos do DASH em sim :
				- Utiliza classes diferentes (desatualizadas e afins, ou seja, mesmos problemas do outro).
		- Tentativa mais promissora :
			- Apenas dois hosts, depois de muito fuçar manuais:
				- Conseguimos estabelecer conexões entre os hosts, mas não conseguimos envio e recebimentos de pacotes.
					- Na verdade, todos menos o server tentam enviar pacotes, e ainda assim, nenhum consegue receber dos que tentam enviar.
			- Usar Telnet, que basicamente fica fazendo solicitação de pacotes.
				- Ideia era fazer infinitar solicitações de pacotes e assim manter a conexão permanente sempre.
				- Não conseguimos implementar.

	- Observações gerais: O DASH já implementado depende, aparentemente, principalmente de um arquivo TCPGenericCliApp, que não temos nas novas versões.
		- Fuçando manuais achamos que esse arquivo é uma atual junção de um Telnet + TCPBasicApp, mas não conseguimos entender como eles se juntam, logo não conseguimos separá-los para chegar no anterior.
			(Até porque se a nova versão é a junção, não teriamos motivos para separá-los ... ) 

(13/12) - Decisões sobre as simulações [descrição do trabalho realizado]
	- Podemos trabalhar com Bit rates , considerando qualidades diferentes, ex: baixa, média e alta.
		- Cruzar com Consumo de energia
		- Cruzar com delay

	- Overhead 
		- Cruzar com quantidade de aparelhos.

	- Tarefas: 
		- Verificar quantidade máximas de veículos que conseguimos simular;
		- Padronizar as execuções (tam dos pacotes e tempo de duração)
		- Verificar variação da qualidade de vídeo do DASH dada a movimentação dos aparelhos.

(14/12) - [descrição do trabalho realizado]

	- Conseguimos implementar o DASH usando os módulos novos.
		- Descemos a fundo as hierarquias da nova estrutura e chegamos em como tudo está sendo executado e conseguimos adaptar o DASH (implementado numa versão antiga, na atual).

	- A partir daí, finalizamos TCP e UDP.
	- Pontos agora a serem trabalhados:
		- Cenário ideal.
		- Movimentação dos hosts.
(15/12) - [descrição do trabalho realizado]

	- Estamos simulando com n hosts (depende dos nossos testes). Mas a quantidade é alterada via código, quando necessária.
	- Definimos movimentação “caótica” e aleatória desses n nós.
	- Funciona via wireless.
	- Problemas:
		- A distribuição de pacotes não é proporcional pra todos os nós;
		- Quando um dos hosts atinge a quantidade máxima de pacotes, a simulação é encerrada, ignorando o fato de que nenhum dos outros recebeu tal quantia.
		- Não entendemos como esse host (o que recebe todos os pacotes) é selecionado pelo servidor.

(18/12) – Decisões finais (do ano) :

	- O cenário será:
		- Servidor(recebendo da cloud) repassando pras antenas (nas rodovias) que passam pros carros.
	- Os carros não vão repassar entre eles.
	- Queremos trocas de antenas de acordo com a movimentação.

[2018]

(17/01) – Retorno das atividades
	
	- Retomamos o projeto, e conversamos sobre o estado atual, e reforçamos os planos.
	- Desejamos terminar as simulações no nosso cenário ideal (até então) e ter o paper escrito até Março.
	- Se assim for, submetermos na trilha de workshops da SBRC.

(19/01) - [descrição do trabalho realizado]

	- Encontramos vários exemplos com nosso cenário, minimalista, com 1 server, router, host.
	- Antes descrevíamos como antenas, mas agora utilizaremos Aps como antenas.
	- Em cima dos exemplos que encontramos (no próprio INET), vamos criar o nosso cenário mais elaborado.
	- Testamos o cenário báscio com o nosso DASH e funcionou.

(05-02)
	- Reunião com o Gold (Feedback do cenário e do início do paper pra SBRC):
		- Paper : Ta no caminho certo, só falta detalhar umas coisas melhor e fazer frases maiores, sem muitas quebras e pontos.
		- Simulação :
			- Ta boa também, mas verificar:
				- Possibilidade de mais uma mobilidade pra comparação. Mobilidades mais reais, com aglomerações, por ex.
				- Verificar qnt de acks pro TCP enviar algo. Fazer algo que ele comece a enviar x pacotes antes mesmo de receber os acks.
				- Trabalhos relacionados : Mostrar trabalhos na área e justificar porque o nosso é útil.
				- Verificar a possibilidade da implementação de um mapa no cenário.

	- Reunião com o Roger (mesmo feedback que com o Gold) :		
		- Cenário 
			- Disse que tudo bem e não está errado em assumirmos que a infro de rede ta por tras e só simular os carros
			- a ideia ta em um caminho bom
		- Análise :

			- tomar cuidadosó na analise em usar bitRate e PcktLoss porque são os mesmos, a diferença é que um vai estar tratado e o outro discretizado
			- se usassemos dlay ficaria muito bom , porque ai podemos mostrar que de um lado voce ganha qualidade mas perde em atraso
			- ficaria melhor ainda se usasse a contagem de hops, mas isso pode ficar pra um outro momento
			- olharmos pra ver se 10,20 e 30 ta dando diferenças analisaveis pq senao, fica sem conteudo, daí devessemos usar 10, 100 e 1000 por ex e ai, readequar o cenário se necessário tamanho e etc.

(05-02 - 19/03) 

Dentro desse período passamos a trabalhar presencialmente constantemente, de forma que as decisões que antes necessitavam de reuniões passaram a ser tomadas mais facilmente. Passamos a relatar apenas as tarefas executadas periodicamente, como consta no README.md na raiz do repositório.
Durante esse período executamos as seguintes etapas:
	- Finalizamos o cenário experimental e sua implementação;
	- Definimos e executamos os testes analisando:
		- Delay na entrega dos pacotes entre Emissor e Receptor;
		- Quantidade total de KiB recebidos pelo Receptor;
		- Taxa de perda de pacotes na transmissão;

		Todos eles comparados entre os protocolos TCP, UDP e a técnica DASH.

- Semana do 19/03 : 
	Revisão e conclusão das análises dos dados obtidos. Finalização do primeiro artigo
	do projeto e submissão na trilha WTG da 
	SBRC2018 ( http://www.sbrc2018.ufscar.br/ ).

- Semana do 26/03 : 
	Revisão geral do trabalho feito até então e levantamento das próximas tarefas. 
	Junto com a disciplina MAC0470 foi criado um subprojeto, para submeter o cenário
	concluído até a etapa	anterior no repositório oficial da extensão do simulador, 
	INET Framework ( https://inet.omnetpp.org/ ), colaborando com a comunidade 
	que o utiliza.

- Semana do 02/04 : 
	Por motivo de problemas pessoais, não trabalhei no projeto nessa semana.

- Semana do 09/04 :
	Revisão e correções seguindo os apontamento do feedback da submissão para a trilha
	WTG da SBRC2018. O artigo foi aceito :D !! Resultado divulgado 10/04.

- Semana do 16/04 :
	Foi marcada uma pré-apresentação do nosso trabalho para o grupo de sistemas 
	para o dia 23/04 para que possamos melhor nos preparar para o Congresso.
	Nessa semana foquei em rever toda a fundamentação do trabalho, os conceitos 
	e bibliografias principais para estar preparado para possíveis questionamentos 
	e para melhor preparar a apresentação.

- Semana do 23/04:
	Nessa semana eu apresentei, junto ao meu grupo, nosso projeto do WTG do SBRC2018.
	A apresentação foi feita para o grupo de sistemas do IME e tivemos ótimos
	feedbacks. Assim sendo agora estamos trabalhando nas possíveis correções 
	para a apresentação oficial que será no dia 6 de Maio no SBRC.

- Semana do 30/04:
	Fizemos as correções apontadas na nossa apresentação para o grupo de sistemas do IME.
	No dia 06/05 fomos para a SBRC2018 em Campos do Jordão para então apresentar nosso
	artigo. A apresentação foi ótima, tivemos muitas perguntas e comentários construtivos
	e acreditamos que nos saímos bem.
	A partir de agora, vamos nos reunir com nosso orientador para programar as próximas
	etapas.
	Também fiz um pull request para o repositório do INET Framework com a nossa 
	implementação da transmissão de vídeo ao vivo via TCP e via DASH, e com nosso cenário 
	experimental. Para que os dois primeiros fossem acrescentados aos módulos de 
	TCP->Wireless e o cenário experimntal para os exemplos disponíveis.

- De 6 a 7 de Maio : Participação no SBRC2018 em Campos do Jordão. 
	![SBRC2018 Campos do Jordão](https://github.com/andersonandrei/VehicularNetworksIC/blob/master/SBRC2018/1.jpg)

- Semana do 07/05 :
	Durante nossa apresentação no SBRC2018 tivemos muitas perguntas construtivas e algumas 	
	recomendações muito interessantes. Assim, nessa semana, agrupamos toda a informação 
	obtida no Simpósio e fizemos nossa devolutiva para nosso orientador.

- Semana do 14/05 :
	Durante essa semana, remontamos nosso plano de trabalho, partindo agora para o estudo
	 da parte específica de redes veiculares, assim como as ferramentas que usaremos a 
	 partir de então. São elas o Veins e o Sumo Simulator que são módulos do OMNeT++ 
	 e que interagem com o INET Framework, que temos utilizado.

- Semana do 21/05 :
	Verifiquei que está para ser lançada uma nova versão do INET Framework e decidimos
	versar nosso projeto para tal atualização.
	Também apontaram no meu pull request que seria mais fácil de acrescentar o projeto 
	ao repositório em si, se eu o atualiza-se o para essa nova versão.
	A partir da branch "integration" do repositório deles do GitHub obtive tal versão 
	em desenvolvimento para então adequar nossa implementação de transmissão de 
	vídeo ao vivo via TCP e via DASH, assim como nosso cenário experimental.

- Semana do 28/05 :
	Ainda estou trabalhando na atualização do nosso cenário para a nova versão do 
	INET Framework. Alguns módulos de transmissão de pacotes foram refatorados, e 
	uma nova camada de validação da integridade dos pacotes foi acrescentada, assim, 
	estou com dificuldades para efetuar a atualização.
	Mesmo assim, atualizei minhas modificações no meu pull request para o repositório 
	e pedi orientações para o tratamento dos erros.

- Semana do 04/06 : 
	Recebi uma resposta com uma breve explicação do erro e possíveis próximos passos. 
	Recebi também outra resposta de um outro desenvolvedor da comunidade informando 
	que criou uma branch com minhas modificações e que está trabalhando em correções.

- Semana do 11/06 :
	Consegui arrumar mais um erro da implementação e atualizei no pull request, mas 
	ainda existem erros na minha simulação. O código compila e executa, mas está 
	apontando erro durante a simulação.
	Nesta semana trabalharei no banner que será exposto com os principais resultados 
	da pesquisa. Nele apontarei dados do paper que publicamos.

